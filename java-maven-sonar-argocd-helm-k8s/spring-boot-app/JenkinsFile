pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--entrypoint="" --user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    GIT_REPO_NAME = "Jenkins-CI-CD"
    GIT_USER_NAME = "kushagra-g9"
    DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
    
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build and Test') {
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          sh 'mvn clean package'
        }
      }
    }


stage('Static Code Analysis') {
environment {
SONAR_URL = "http://172.25.3.28:9000"
  }
  steps {
    script {

      withCredentials([string(credentialsId: 'maven-scan', variable: 'SONAR_AUTH_TOKEN')]) {
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
              
          
        }
      }
    }
  }






    stage('Build and Push Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-cred', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
          dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
            sh 'docker build -t $DOCKER_IMAGE .'
            script {
              docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                docker.image(DOCKER_IMAGE).push()
              }
            }
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "kushagra.xyz@gmail.com"
            git config user.name "Kushagra"
            git pull --rebase
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
          '''
        }
      }
    }

    stage('ArgoCD Deploy') {
      steps {
        sh '''
          argocd login localhost:8080 --username admin --password your_password --insecure
          argocd app sync ultimate-cicd-app
        '''
      }
    }
  }
}
